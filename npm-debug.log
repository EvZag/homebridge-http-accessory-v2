0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.10.8
3 info using node@v6.9.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   escapedName: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/administrator/Projects/homebridge/homebridge-http-accessory',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/administrator/.npm/homebridge-http-advanced-accessory/1.1.7/package.tgz not in flight; packing
9 verbose correctMkdir /Users/administrator/.npm correctMkdir not in flight; initializing
10 info lifecycle homebridge-http-advanced-accessory@1.1.7~prepublish: homebridge-http-advanced-accessory@1.1.7
11 silly lifecycle homebridge-http-advanced-accessory@1.1.7~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/administrator/.npm/homebridge-http-advanced-accessory/1.1.7/package.tgz',
12 verbose tar pack   '/Users/administrator/Projects/homebridge/homebridge-http-accessory' ]
13 verbose tarball /Users/administrator/.npm/homebridge-http-advanced-accessory/1.1.7/package.tgz
14 verbose folder /Users/administrator/Projects/homebridge/homebridge-http-accessory
15 verbose addLocalTarball adding from inside cache /Users/administrator/.npm/homebridge-http-advanced-accessory/1.1.7/package.tgz
16 verbose correctMkdir /Users/administrator/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd homebridge-http-advanced-accessory@1.1.7
18 verbose afterAdd /Users/administrator/.npm/homebridge-http-advanced-accessory/1.1.7/package/package.json not in flight; writing
19 verbose correctMkdir /Users/administrator/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/administrator/.npm/homebridge-http-advanced-accessory/1.1.7/package/package.json written
21 silly publish { name: 'homebridge-http-advanced-accessory',
21 silly publish   version: '1.1.7',
21 silly publish   description: 'http plugin for homebridge: https://github.com/nfarina/homebridge',
21 silly publish   license: 'ISC',
21 silly publish   keywords: [ 'homebridge-plugin' ],
21 silly publish   engines: { node: '>=0.12.0', homebridge: '>=0.4.0' },
21 silly publish   author: { name: 'tasict' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/staromeste/homebridge-http-advanced-accessory.git' },
21 silly publish   dependencies:
21 silly publish    { request: '^2.65.0',
21 silly publish      'polling-to-event': '>=2.0.2',
21 silly publish      'hap-nodejs': '>=0.4.25',
21 silly publish      xmldom: '^0.1.27',
21 silly publish      xpath: '0.0.24' },
21 silly publish   homepage: 'https://github.com/staromeste/homebridge-http-advanced-accessory#readme',
21 silly publish   readme: '# homebridge http advanced accessory\n\nHomebridge plugin that can turn virtually any device which exposes HTTP APIs into an HomeKit compatible Service.\nIts purpose is to connect any device that can be controlled via HTTP command to Homekit. It creates a Homebridge accessory which uses HTTP calls to *change* and *check* its state via the concept of \'actions\'.\n\nThis plugin is a fork of HttpAccessory and has merged many features (mainly mappers) from the homebridge-http-securitysystem (<https://github.com/codetwice/homebridge-http-securitysystem>).\n\n## Installation\n\n1. Install homebridge using: npm install -g homebridge\n2. Install this plugin using: npm install -g homebridge-http-advanced-accessory\n3. Update your configuration file. See sample-config.json in this repository for a sample. \n\n## Features\n\nThe main function of the module is to proxy HomeKit queries to an arbitrary web API to retrieve and set the status of the accessory. Main features include:\n\n- Configurable HTTP endpoints to use for getting/setting the state, including passing parameters in for of GET or in POST body\n- Support for basic HTTP authentication\n- Configurable mapping of API response data to HomeKit Accessory status to allow custom responses\n- Configurable mapping of url and body request data to HomeKit Accessory status to allow custom requests\n- Interval polling of the current state to enable real-time notifications even if the Accessory has been enabled without the use of HomeKit\n\n## Configuration\n\nConfiguration sample:\n\n ```json\n {\n    "bridge": {\n        "name": "Homebridge",\n        "username": "C1:38:5A:AC:39:30",\n        "port": 51826,\n        "pin": "123-45-678"\n    },\n    "description": "This is an example configuration for the Everything Homebridge plugin",\n    "accessories": [\n        {\n            "accessory": "HttpAdvancedAccessory",\n            "service": "ContactSensor",\n            "name": "Terrace Sensor",\n            "forceRefreshDelay": 5,\n            "username": "admin",\n            "password": "admin",\n            "debug" : false,\n            "optionCharacteristic" :[],\n            "urls":{\n               "getContactSensorState": {\n                  "url" : "http://remoteserver/xml/zones/zonesStatus48IP.xml",\n                  "mappers" : [\n                      {\n                          "type": "xpath",\n                          "parameters": {\n                              "xpath": "//status[1]/text()"\n                          }\n                      },\n                      {\n                          "type": "static",\n                          "parameters": {\n                              "mapping": {\n                                  "ALARM": "1",\n                                  "NORMAL":"0"\n                              }\n                          }\n                     }\n                  ]\n               }\n            }\n         },\n         {\n         "accessory": "HttpAccessory",\n         "service": "SecuritySystem",\n         "name": "Btcino Security",\n         "forceRefreshDelay": 5,\n         "username": "admin",\n         "password": "admin",\n         "debug" : false,\n         "urls":{\n            "getSecuritySystemTargetState": {\n               "url" : "http://remoteserver/xml/state/virtualKeypad.xml",\n               "mappers" : [\n                   { "type": "xpath",  "parameters": { "xpath": "//generic/text()" } },\n                   { "type": "static", "parameters": { "mapping": { "0": "3", "1": "1", "2": "2", "3": "0" } } }\n               ]\n            },\n            "getSecuritySystemCurrentState": {\n               "url" : "http://remoteserver/xml/partitions/partitionsStatus48IP.xml", \n               "mappers" : [\n                  { "type": "regex",  "parameters": { "regexp" : "(ALARM)",    "capture": "1" } },\n                  { "type": "regex",  "parameters": { "regexp" : ">(ARMED)",   "capture": "1" } },\n                  { "type": "regex",  "parameters": { "regexp" : "(DISARMED)", "capture": "1" } },\n                  { "type": "static", "parameters": { "mapping": { "ALARM": "4", "ARMED":"inconclusive", "DISARMED": "3"} } }\n               ],\n               "inconclusive" : {\n                  "url" : "http://remoteserver/xml/state/virtualKeypad.xml", \n                  "mappers" : [\n                      { "type": "xpath",  "parameters": { "xpath": "//generic/text()" } },\n                      { "type": "static", "parameters": { "mapping": { "0": "3", "1": "1", "2": "2", "3": "0" } } }\n                  ]\n               }\n            },\n            "setSecuritySystemTargetState": {\n               "url" : "http://remoteserver/xml/cmd/cmdOk.xml?cmd=setMacro&macroId={value}&redirectPage=/xml/cmd/cmdError.xml",\n               "mappers" : [\n                   { "type": "static", "parameters": { "mapping": { "0": "3", "1": "1", "2": "2", "3": "0" } } }\n               ]\n            }\n         }\n         }\n    ],\n\n    "platforms": []\n}\n```\n\n- The **name** parameter determines the name of the accessory you will see in HomeKit.\n- The **service** parameter determines the kind of Service\\Accessory you will see in HomeKit.\n- The **username/password** configuration can be used to specify the username and password if the remote webserver requires HTTP authentication.\n- A **debug** turns on debug messages. The important bit is that it reports the mapping process so that it\'s easier to debug.\n- The **optionCharacteristic** is an array of optional Characteristic of the service that you want to expose the full list of supported, mandatory and optional, Characteristics can be found here: <https://github.com/mlaanderson/HAP-NodeJS-Types/blob/master/lib/gen/README.md>\n- The **urls section** configures the URLs that are to be called on certain events. It contains a key-value map of actions that can be executed. The key is name of the action and the value is a configuration JSON object for that action. See the **Actions** section below.\n- The **polling** is a boolean that specifies if the current state should be pulled on regular intervals or not. Defaults to false.\n- **pollInterval** is a number which defines the poll interval in seconds. Defaults to 0.\n- The **mappings** optional parameter allows the definition of several response mappers. This can be used to translate the response received by readCurrentState and readTargetState to the expect 0...4 range expected by homekit\n\n## Actions\n\nThe action is a key-value map that configures the URLs to be called to perform a read or a write on a particular Charateristic. In fact, there are two kind of actions, getters and setters: actions for getter keys begin with word "get", actions for the setters begin with "set".\nSo the key name is composed of two parts:\n\n- The kind of action: "get" or "set"\n- The name of the HomeKit Characteristics for that Service (the full list of supported Characteristics can be found here: <https://github.com/mlaanderson/HAP-NodeJS-Types/blob/master/lib/gen/README.md>\n\nFor example to get the value of the SecuritySystemTargetState Characteristic, the key value would be "getSecuritySystemTargetState" while to set it, "setSecuritySystemTargetState"\nThe value object has the following JSON format for a **getter** action:\n\n```JSON\n"getTargetTemperature" : {\n    "url":"http://",\n    "httpMethod":"",\n    "body" : "",\n    "mappers" : [],\n    "inconclusive" : {\n        "url":"",\n        "httpMethods":"",\n        "mappers": [],\n        "inconclusive":{}\n    }\n}\n```\n\nWhere:\n-The **url** parameter is the url to be called for that action.\n-The **httpMethod** (OPTIONAL) parameter is one of "GET" or "POST". Defaults to "GET".\n-The **body** (OPTIONAL) parameter is the body of the HTTP POST call.\n-The **mappers** (OPTIONAL) are a chain of blocks that have the purpose to parse the response received\n-The **inconclusive** (OPTIONAL) parameter is another action that will be invoked if the result of the previous mapping chain is the word "inconclusive"\n\nThe value object has the following JSON format for a **setter** action:\n\n```JSON\n"setTargetTemperature" : {\n    "url":"http://remoteserver/setTemperature?{value}",\n    "httpMethod":"",\n    "body" : "{value}",\n    "mappers" : []\n}\n```\n\nWhere:\n-The **url** parameter is the url to be called for that action. If the string contains the "{value}" placeholder, it will be replaced by the value that HomeKit wants to set, after being changed parsed by mappers.\n-The **httpMethod** (OPTIONAL) parameter is one of "GET" or "POST". Defaults to "GET".\n-The **body** (OPTIONAL) parameter is the body of the HTTP POST call.\n-The **mappers** (OPTIONAL) are a chain of blocks that have the purpose of changing the value that HomeKit wants to set to something that is valid for your device\n\n### Mapping\n\nThe mappings block of the configuration may contain any number of mapper definitions. The mappers are chained after each other,  the result of a mapper is fed into the input of the next mapper. The purpose of this whole chain is to somehow boil down the response received from the API to a single value which is expected by Homekit.\n\nEach mapper has the following JSON format:\n\n```JSON\n{\n    "type": "<type of the mapper>",\n    "parameters": { <parameters to be passed to the mapper> }\n}\n```\n\nThere are 3 kinds of mappers implemented at the moment.\n\n#### Static mapper\n\nThe static mapper can be used to define a key => value dictionary. It will simply look up the input in the dictionary and if it is found, it returns the corresponding value. It\'s great for mapping string responses like "ARMED" to their actual number. \n\nConfiguration is as follows:\n\n```JSON\n{\n    "type": "static",\n    "parameters": { \n        "mapping": {\n            "STAY": "0",\n            "AWAY": "1",\n            "whataever you don\'t like": "whatever you like more"\n        }\n    }\n}\n```\n\nThis configuration would map STAY to 0, AWAY to 1 and "whatever you don\'t like" to "whatever you like more". If the mapping does not have an entry which corresponds to input, it returns the full input. \n\n#### Regexp mapper\n\nThe regexp mapper can be used to define a regular expression to run on the input, capture some substring of it and return it. It\'s great for mapping string responses which may change around but have a certain part that\'s always there and which is the part you are interested in. \n\nConfiguration is as follows:\n\n```JSON\n{\n    "type": "regex",\n    "parameters": {\n        "regexp": "^The system is currently (ARMED|DISARMED), yo!$",\n        "capture": "1"\n    }\n}\n```\n\nThis configuration will run the regular expression defined by the ***regexp*** parameter against the input and return the first capture group (as defined by ***capture***). So, in this case, if the input is "The system is currenty ARMED, yo!", the mapper will map this to "ARMED".\n\nIf the regexp does not match the input, the mapper returns the full input. \n\n#### XPath mapper\n\nThe XPath mapper can be used to extract data from an XML document. It allows the definition of an XPath which will then be applied to the input and returns whatever the query selects. \n\nWhen using this mapper, make sure that you select text elements and not entire nodes or node lists, otherwise it will fail horribly.\n\nConfiguration is as follows:\n\n```JSON\n{\n    "type": "xpath",\n    "parameters": {\n        "xpath": "//partition[3]/text()",\n        "index": 0\n    }\n}\n```\n\nLet\'s assume this mapper gets the following input:\n\n```XML\n<?xml version="1.0" encoding="ISO-8859-1"?>\n<partitionsStatus>\n    <partition>ARMED</partition>\n    <partition>ARMED</partition>\n    <partition>ARMED_IMMEDIATE</partition>\n</partitionsStatus>\n```\n\nIn this case this mapper will return "ARMED_IMMEDIATE". The ***index*** parameter can be used to specify which element to return if the xpath selects multiple elements. In the example above it is completely redundant as partition[3] already makes sure that a single partition is selected.\n\n## Supported services\n\nAccessoryInformation\nAirQualitySensor\nBatteryService \nBridgeConfiguration\nBridgingState\nCameraControl\nCameraRTPStreamManagement\nCarbonDioxideSensor\nCarbonMonoxideSensor\nContactSensor\nDoor\nDoorbell\nFan\nGarageDoorOpener\nHumiditySensor\nLeakSensor\nLightSensor\nLightbulb\nLockManagement\nLockMechanism\nMicrophone\nMotionSensor\nOccupancySensor\nOutlet\nPairing\nProtocolInformation\nRelay\nSecuritySystem\nSmokeSensor\nSpeaker\nStatefulProgrammableSwitch\nStatelessProgrammableSwitch\nSwitch\nTemperatureSensor\nThermostat\nTimeInformation\nTunneledBTLEAccessoryService\nWindow\nWindowCovering  \n\n## Configuration Example\n\nThe purpose of this section is collect as many configuration example as possible.\n\n### Bticino "Nuovo antifurto filare"\n\nThis first example is to configure a Bticino (BT-4200, 4201, 4202) as a HomeKit SecuritySystem\n\n```json\n    {\n        "accessory": "HttpAccessory",\n        "service": "SecuritySystem",\n        "name": "Btcino Security",\n        "forceRefreshDelay": 5,\n        "username": "admin",\n        "password": "admin",\n        "debug" : false,\n        "urls":{\n            "getSecuritySystemTargetState": {\n                "url" : "http://remoteserver/xml/state/virtualKeypad.xml",\n                "mappers" : [\n                    { "type": "xpath",  "parameters": { "xpath": "//generic/text()" } },\n                    { "type": "static", "parameters": { "mapping": { "0": "3", "1": "1", "2": "2", "3": "0" } } }\n                ]\n            },\n            "getSecuritySystemCurrentState": {\n                "url" : "http://remoteserver/xml/partitions/partitionsStatus48IP.xml", \n                "mappers" : [\n                    { "type": "regex",  "parameters": { "regexp" : "(ALARM)",    "capture": "1" } },\n                    { "type": "regex",  "parameters": { "regexp" : ">(ARMED)",   "capture": "1" } },\n                    { "type": "regex",  "parameters": { "regexp" : "(DISARMED)", "capture": "1" } },\n                    { "type": "static", "parameters": { "mapping": { "ALARM": "4", "ARMED":"inconclusive", "DISARMED": "3"} } }\n                ],\n                "inconclusive" : {\n                    "url" : "http://remoteserver/xml/state/virtualKeypad.xml", \n                    "mappers" : [\n                        { "type": "xpath",  "parameters": { "xpath": "//generic/text()" } },\n                        { "type": "static", "parameters": { "mapping": { "0": "3", "1": "1", "2": "2", "3": "0" } } }\n                    ]\n                }\n            },\n            "setSecuritySystemTargetState": {\n                "url" : "http://remoteserver/xml/cmd/cmdOk.xml?cmd=setMacro&macroId={value}&redirectPage=/xml/cmd/cmdError.xml",\n                "mappers" : [\n                    { "type": "static", "parameters": { "mapping": { "0": "3", "1": "1", "2": "2", "3": "0" } } }\n                ]\n            }\n        }\n    }\n```\n\n### Bticino "Nuovo antifurto filare" Zones as ContactSensor\n\n```JSON\n{\n    "accessory": "HttpAdvancedAccessory",\n    "service": "ContactSensor",\n    "name": "Terrace Sensor",\n    "forceRefreshDelay": 5,\n    "username": "admin",\n    "password": "admin",\n    "debug" : false,\n    "urls":{\n        "getContactSensorState": {\n            "url" : "http://remoteserver/xml/zones/zonesStatus48IP.xml",\n            "mappers" : [\n                {\n                    "type": "xpath",\n                    "parameters": {\n                        "xpath": "//status[1]/text()"\n                    }\n                },\n                {\n                    "type": "static",\n                    "parameters": {\n                        "mapping": {\n                            "ALARM": "1",\n                            "NORMAL":"0"\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n```\n\n### Daikin as HeaterCooler\n\nThis is still incomplete but the unofficial Daikin documentation (<https://github.com/ael-code/daikin-control>) can help you to complete it.\n\n```JSON\n{\n    "accessory": "HttpAccessory",\n    "service": "HeaterCooler",\n    "name": "Condizionatore Soggiorno",\n    "forceRefreshDelay": 5,\n    "debug" : false,\n    "urls":{\n        "getCurrentHeaterCoolerState": {\n            "url" : "http://192.168.x.x/aircon/get_control_info", \n            "mappers" : [\n                {"type": "regex", "parameters": {"regexp": "(pow=0)","capture": "1"} },\n                {"type": "regex", "parameters": { "regexp": "mode=(\\\\d)", "capture": "1"} },\n                {"type": "static", "parameters": { "mapping": { "pow=0": "0", "3":"3", "4":"2"} } }\n            ]\n        },\n        "getTargetHeaterCoolerState":{\n            "url" : "http://192.168.x.x/aircon/get_control_info", \n            "mappers" : [\n                {"type": "regex", "parameters": {"regexp": "(pow=0)","capture": "1"} },\n                {"type": "regex", "parameters": { "regexp": "mode=(\\\\d)", "capture": "1"} },\n                {"type": "static", "parameters": { "mapping": { "pow=0": "0", "3":"3", "4":"2"} } }\n            ]\n        },\n        "setTargetHeaterCoolerState":{\n            "url" : "http://192.168.x.x/aircon/set_control_info/{value}",\n            "mappers" : [\n                {"type": "static", "parameters": { "mapping": { "0": "?mode=0", "1":"?mode=4", "2":"?mode=3"} } }\n            ]\n        },\n        "getActive":{\n            "url" : "http://192.168.x.x/aircon/get_control_info", \n            "mappers" : [\n                {"type": "regex", "parameters": {"regexp": "pow=(\\\\d)","capture": "1"} }\n            ]\n        },\n        "setActive":{\n            "url" : "http://192.168.x.x/aircon/set_control_info/{value}",\n            "mappers" : [\n                {"type": "static", "parameters": { "mapping": { "0": "?pow=0", "1":"?pow=1"} } }\n            ]\n        }\n\n    }\n}\n\n```',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'a9984d02ac1e8f0e70dc043a41d0cb0db80ae0f4',
21 silly publish   bugs: { url: 'https://github.com/staromeste/homebridge-http-advanced-accessory/issues' },
21 silly publish   _id: 'homebridge-http-advanced-accessory@1.1.7',
21 silly publish   scripts: {},
21 silly publish   _shasum: '3686b3782b019bc3d1d4ee4722b24dd1ec4a3523',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name homebridge-http-advanced-accessory
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'homebridge-http-advanced-accessory',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   escapedName: 'homebridge-http-advanced-accessory',
26 silly mapToRegistry   name: 'homebridge-http-advanced-accessory',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/homebridge-http-advanced-accessory
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/administrator/.npm/homebridge-http-advanced-accessory/1.1.7/package.tgz
30 verbose request uri https://registry.npmjs.org/homebridge-http-advanced-accessory
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 1:39:59 AM
33 verbose request using bearer token for auth
34 verbose request id 6cc1ae94d76b114a
35 http request PUT https://registry.npmjs.org/homebridge-http-advanced-accessory
36 http 403 https://registry.npmjs.org/homebridge-http-advanced-accessory
37 verbose headers { date: 'Wed, 11 Jul 2018 23:40:03 GMT',
37 verbose headers   'content-type': 'application/json',
37 verbose headers   'transfer-encoding': 'chunked',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'set-cookie': [ '__cfduid=d983c25e402e7518d183f9067f9b832611531352401; expires=Thu, 11-Jul-19 23:40:01 GMT; path=/; domain=.registry.npmjs.org; HttpOnly' ],
37 verbose headers   'cf-ray': '438f1cda59996f36-FCO',
37 verbose headers   'expect-ct': 'max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"',
37 verbose headers   server: 'cloudflare',
37 verbose headers   'content-encoding': 'gzip' }
38 verbose request invalidating /Users/administrator/.npm/registry.npmjs.org/homebridge-http-advanced-accessory on PUT
39 error publish Failed PUT 403
40 verbose stack Error: You cannot publish over the previously published versions: 1.1.7. : homebridge-http-advanced-accessory
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:302:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:290:14)
40 verbose stack     at /usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:216:7
40 verbose stack     at Gunzip.onEnd (zlib.js:227:5)
40 verbose stack     at emitNone (events.js:91:20)
40 verbose stack     at Gunzip.emit (events.js:185:7)
40 verbose stack     at endReadableNT (_stream_readable.js:974:12)
40 verbose stack     at _combinedTickCallback (internal/process/next_tick.js:74:11)
40 verbose stack     at process._tickCallback (internal/process/next_tick.js:98:9)
41 verbose statusCode 403
42 verbose pkgid homebridge-http-advanced-accessory
43 verbose cwd /Users/administrator/Projects/homebridge/homebridge-http-accessory
44 error Darwin 17.7.0
45 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
46 error node v6.9.1
47 error npm  v3.10.8
48 error code E403
49 error You cannot publish over the previously published versions: 1.1.7. : homebridge-http-advanced-accessory
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
